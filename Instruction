Dynatrace Demo App
A simple Python Flask application designed for monitoring, troubleshooting, and learning Dynatrace.
 
Table of Contents
•	Project Overview
•	Prerequisites
•	Local Setup and Testing
•	Deploy on AWS Free Tier EC2
•	Install Dynatrace OneAgent for Monitoring
•	Testing Endpoints
•	Monitoring in Dynatrace
•	Troubleshooting
•	Useful Links
 
Project Overview
This project contains a minimal Flask app with two endpoints:
•	/ : returns a simple hello message and logs an INFO message.
•	/error : simulates an error by throwing an exception, useful for monitoring error alerts in Dynatrace.
The app logs messages to a file (app.log), which Dynatrace OneAgent can monitor.
 
Prerequisites
•	Python 3 installed locally
•	Git installed locally
•	An AWS account with permissions to create EC2 instances
•	A Dynatrace account with a free trial or valid subscription
 
Local Setup and Testing
Follow these steps to get the app running on your local machine:
1. Clone the Repo
git clone https://github.com/Starboy6355/dynatrace-demo-app.git
cd dynatrace-demo-app

2. (Optional) Create and Activate a Python Virtual Environment
python3 -m venv venv
source venv/bin/activate   # For Windows use: venv\Scripts\activate

3. Install Dependencies
pip install -r requirements.txt

4. Run the Flask App
python app.py

The app will be running on http://localhost:5000.
5. Test Locally
•	Visit http://localhost:5000 in your browser — it should display a hello message.
•	Visit http://localhost:5000/error to simulate an error.
 
Deploy on AWS Free Tier EC2
Follow these steps to deploy the app on AWS:
1. Launch EC2 Instance
•	Go to AWS EC2 console.
•	Launch an instance with these settings:
o	AMI: Amazon Linux 2 (Free Tier eligible)
o	Instance type: t2.micro
o	Configure security group to allow:
	SSH (port 22) from your IP
	Custom TCP port 5000 (for Flask app) from anywhere (0.0.0.0/0) or your IP
•	Download and save your keypair (.pem file).
2. Connect to EC2 Instance
ssh -i /path/to/your-key.pem ec2-user@<your-ec2-public-ip>

3. Update and Install Dependencies
sudo yum update -y
sudo yum install python3 git -y

4. Clone Your GitHub Repo
git clone https://github.com/Starboy6355/dynatrace-demo-app.git
cd dynatrace-demo-app

5. Install Python Packages
pip3 install -r requirements.txt

6. Run the Flask App
sudo python3 app.py

Or run in background:
nohup sudo python3 app.py &

7. Test Your App on EC2
•	Visit http://<your-ec2-public-ip>:5000 in your browser to see the app running.
•	Visit http://<your-ec2-public-ip>:5000/error to simulate an error.
 
Install Dynatrace OneAgent for Monitoring
1. Sign up or log in on Dynatrace.
2. In Dynatrace UI:
•	Navigate to Deploy Dynatrace > Start Installation > Linux
•	Choose installation method and copy the install command with your environment URL and API token.
3. Install OneAgent on EC2
Run the install command copied in the step above on your EC2 instance. Example:
wget -O Dynatrace-OneAgent.sh "https://<your-env>.live.dynatrace.com/api/v1/deployment/installer/agent/unix/latest?Api-Token=<your-token>"
sudo /bin/sh Dynatrace-OneAgent.sh

4. Confirm Monitoring
•	Within a few minutes, your EC2 host and the running Python process should appear in Dynatrace.
•	Logs and errors generated by the app will be ingested automatically.
 
Testing Endpoints
Endpoint	Purpose	Expected Behavior
/	Health check/homepage	Returns welcome message, logs INFO
/error	Simulate application error	Raises an exception, logs ERROR

 
Monitoring in Dynatrace
•	View CPU, memory, disk, and network metrics for the EC2 instance.
•	Monitor Python process health and resource usage.
•	Analyze logs for ERROR entries generated by the /error endpoint.
•	Use Dynatrace problem notifications and dashboards to get alerted on issues.
 
Troubleshooting
•	If the app is unreachable, check EC2 security group inbound rules for port 5000.
•	Use sudo netstat -tulpn to verify Flask app is listening on port 5000.
•	If errors don’t show in Dynatrace logs, ensure OneAgent is installed and running.
•	Check OneAgent status:
sudo /opt/dynatrace/oneagent/agent/tools/oneagentctl --status

 
Useful Links
•	Dynatrace Trial Signup
•	AWS Free Tier
•	Flask Official Docs
•	GitHub Repository
 
Happy Monitoring with Dynatrace!
